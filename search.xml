<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浅谈Vue生命周期]]></title>
    <url>%2Fhexo%2F2017%2F08%2F31%2F%E6%B5%85%E8%B0%88Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[每个vue实例在被创建之前都要经过初始化。例如观测数据，初始化事件，挂载Dom，同时data变化时，更新Dom，在这一系列过程中有着一些钩子，在完成某些特定的条件时，便会触发，我们称它为钩子函数。一个实例从创建到销毁的过程则称之为实例的生命周期。 这是一张vue生命周期的图解，原作者@老马自嘲 下面介绍一下vue的钩子函数： beforeCreatebeforeCreate发生在new Vue()之后，但在还没有观测数据之前调用 created在观测数据以及vue内部初始化事件后调用created钩子 beforeMount开始挂载钩子，但是还没有生成HTML到页面上，此时标签内任然是Mustach mounted挂载完成，html渲染到页面上，此时可以用axios发送一些ajax请求 beforeUpdate在数据更新之前调用的钩子 updated数据更新之后调用,之后多次更新数据任然会调用此钩子 beforeDestroyvue实例销毁前执行 destroyedvue实例销毁后执行，此后vue的watcher，组件，以及时间都被卸载，不能使用，但是data任然存在 最后理一遍思路，先new Vue()创建一个实例，调用beforeCreate钩子，观测数据，初始化事件，调用created钩子，判断el是否存在，若不存在则等到vm.mount(el)被调用才继续往下执行，若存在，则继续判断template是否存在，若template存在，则把data和template结合，但是不放到页面上，若不存在则使用el的outerHTML作为html，接着调用beforeMount钩子，此时，页面上忍让是大胡子语法的标签，把结合的html放到页面上，调用mounted钩子。当数据发生变化时，先调用beforeUpdate钩子，虚拟Dom渲染数据，然后调用updated钩子。最后当destroy()被调用时，先执行destroy钩子，然后卸载组件，事件，watcher，再调用destroyed钩子，至此就是一个完整的vue生命周期。 下面是一个vue生命周期的例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/vue/2.1.3/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app = new Vue(&#123; el: '#app', data: &#123; message: "monkeyWang is boy" &#125;, beforeCreate: function() &#123; console.group('beforeCreate 创建前状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); //undefined console.log("%c%s", "color:red", "data : " + this.$data); //undefined console.log("%c%s", "color:red", "message: " + this.message) &#125;, created: function() &#123; console.group('created 创建完毕状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); //undefined console.log("%c%s", "color:red", "data : " + this.$data); //已被初始化 console.log("%c%s", "color:red", "message: " + this.message); //已被初始化 &#125;, beforeMount: function() &#123; console.group('beforeMount 挂载前状态===============》'); console.log("%c%s", "color:red", "el : " + (this.$el)); //已被初始化 console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); //已被初始化 console.log("%c%s", "color:red", "message: " + this.message); //已被初始化 &#125;, mounted: function() &#123; console.group('mounted 挂载结束状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); //已被初始化 console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); //已被初始化 console.log("%c%s", "color:red", "message: " + this.message); //已被初始化 &#125;, beforeUpdate: function() &#123; console.group('beforeUpdate 更新前状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); console.log("%c%s", "color:red", "message: " + this.message); &#125;, updated: function() &#123; console.group('updated 更新完成状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); console.log("%c%s", "color:red", "message: " + this.message); &#125;, beforeDestroy: function() &#123; console.group('beforeDestroy 销毁前状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); console.log("%c%s", "color:red", "message: " + this.message); &#125;, destroyed: function() &#123; console.group('destroyed 销毁完成状态===============》'); console.log("%c%s", "color:red", "el : " + this.$el); console.log(this.$el); console.log("%c%s", "color:red", "data : " + this.$data); console.log("%c%s", "color:red", "message: " + this.message) &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 本文参考链接：vue官方文档vue入门系列知乎]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
